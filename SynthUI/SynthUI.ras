program SynthUI;

@use "SCF"
@use "YM2151"
@use "X16Mouse"
@use "Input"
@use "Widget"
@use "Label"
@use "Slider"
@use "Button"
@use "Conn"

var
	const sDT1 : byte = 0;
	const sMUL : byte = 1;
	const sTL  : byte = 2;
	const sKS  : byte = 3;
	const sAR  : byte = 4;
	const sD1R : byte = 5;
	const sDT2 : byte = 6;
	const sD2R : byte = 7;
	const sD1L : byte = 8;
	const sRR  : byte = 9;
	
	const sFB  : byte = 40;
	const sCON : byte = 41;
	const sPMS : byte = 42;
	const sAMS : byte = 43;
	const sLFRQ : byte = 44;
	const sPMDAMD : byte = 45;
	const sW   : byte = 46;
	
	const cAMSEN:byte = 0;
	const cKEYON:byte = 1;
	const cR    :byte = 40;
	const cL    :byte = 41;
	


	const Vertical : byte = 0;
	const Horizontal : byte = 1;

	transpose:byte=3;
	currentchanel:byte=0;
	
	tYM2151OpStat = record
		DT1,MUL,TL,KS,AR,AMSEN,D1R,DT2,D2R,D1L,RR,KEYON:byte;
	end;
	
	tYM2151State = record
		R,L,FB,CON,PMS,AMS,LFRQ,PMDAMD,W:byte;
	end;		
	
	YM2151OpStats:array[4] of tYM2151OpStat;
	YM2151State:array[0] of tYM2151State;

procedure setDT1(op,value:byte);
	begin
	YM2151OpStats[op].DT1:=value;
	Slider::setValue(sDT1+(op*10),value);
	YM2151::SetDT1(currentchanel,op,value);
	end;

procedure setMUL(op,value:byte);
	begin
	YM2151OpStats[op].MUL:=value;
	Slider::setValue(sMUL+(op*10),value);
	YM2151::SetMUL(currentchanel,op,value);
	end;

procedure setTL(op,value:byte);
	begin
	YM2151OpStats[op].TL:=value;
	Slider::setValue(sTL+(op*10),value);
	YM2151::SetTL(currentchanel,op,value);
	end;
	
procedure setKS(op,value:byte);
	begin
	YM2151OpStats[op].KS:=value;
	Slider::setValue(sKS+(op*10),value);
	YM2151::SetKS(currentchanel,op,value);
	end;

procedure setAR(op,value:byte);
	begin
	YM2151OpStats[op].AR:=value;
	Slider::setValue(sAR+(op*10),value);
	YM2151::SetAR(currentchanel,op,value);
	end;
	
procedure setD1R(op,value:byte);
	begin
	YM2151OpStats[op].D1R:=value;
	Slider::setValue(sD1R+(op*10),value);
	YM2151::SetD1R(currentchanel,op,value);
	end;

procedure setDT2(op,value:byte);
	begin
	YM2151OpStats[op].DT2:=value;
	Slider::setValue(sDT2+(op*10),value);
	YM2151::SetDT2(currentchanel,op,value);
	end;
	
procedure setD2R(op,value:byte);
	begin
	YM2151OpStats[op].D2R:=value;
	Slider::setValue(sD2R+(op*10),value);
	YM2151::SetD2R(currentchanel,op,value);
	end;
	
procedure setD1L(op,value:byte);
	begin
	YM2151OpStats[op].D1L:=value;
	Slider::setValue(sD1L+(op*10),value);
	YM2151::SetD1L(currentchanel,op,value);
	end;
	
procedure setRR(op,value:byte);
	begin
	YM2151OpStats[op].RR:=value;
	Slider::setValue(sRR+(op*10),value);
	YM2151::SetRR(currentchanel,op,value);
	end;

procedure setFB(value:byte);
	begin
	YM2151State[0].FB:=value;
	Slider::setValue(sFB,value);
	YM2151::SetFB(currentchanel,value);
	end;
	
procedure setCON(value:byte);
	begin
	YM2151State[0].CON:=value;
	Slider::setValue(sCON,value);
	YM2151::SetCON(currentchanel,value);
	Conn::Show(value);
	end;

procedure setPMS(value:byte);
	begin
	YM2151State[0].PMS:=value;
	Slider::setValue(sPMS,value);
	YM2151::SetPMS(currentchanel,value);
	end;

procedure setAMS(value:byte);
	begin
	YM2151State[0].AMS:=value;
	Slider::setValue(sAMS,value);
	YM2151::SetAMS(currentchanel,value);
	end;

procedure setLFRQ(value:byte);
	begin
	YM2151State[0].LFRQ:=value;
	Slider::setValue(sLFRQ,value);
	YM2151::SetLFRQ(value);
	end;

procedure setPMDAMD(value:byte);
	begin
	YM2151State[0].PMDAMD:=value;
	Slider::setValue(sPMDAMD,value);
	YM2151::SetPMDAMD(value);
	end;
	
procedure setW(value:byte);
	begin
	YM2151State[0].W:=value;
	Slider::setValue(sW,value);
	YM2151::SetW(value);
	end;

procedure handlebuttonclick();
	var clickedButton:byte;
	begin
	clickedButton:=Widget::getMapValue(X16Mouse::mouseXchposAtClick,X16Mouse::mouseYchposAtClick);
	if ((clickedButton>>6)=0) then
		begin
		case clickedButton of
		0: dec(transpose);
		1: inc(transpose);
		end;
		end;

	end;

procedure handlesliderchange();
	begin
	//SCF::DrawBinByte(40,6,clickedSlider,5);
	
		case Slider::clickedSlider of
			sFB:		setFB(Slider::getValue(sFB));
			sCON:		setCON(Slider::getValue(sCON));
			sDT1:		setDT1(0,Slider::getValue(sDT1));
			sDT1+10:	setDT1(1,Slider::getValue(sDT1+10));
			sDT1+20:	setDT1(2,Slider::getValue(sDT1+20));
			sDT1+30:	setDT1(3,Slider::getValue(sDT1+30));
			sMUL:		setMUL(0,Slider::getValue(sMUL));
			sMUL+10:	setMUL(1,Slider::getValue(sMUL+10));
			sMUL+20:	setMUL(2,Slider::getValue(sMUL+20));
			sMUL+30:	setMUL(3,Slider::getValue(sMUL+30));						
			sTL:		setTL(0,Slider::getValue(sTL));
			sTL+10:		setTL(1,Slider::getValue(sTL+10));
			sTL+20:		setTL(2,Slider::getValue(sTL+20));
			sTL+30:		setTL(3,Slider::getValue(sTL+30));									
			sKS:		setKS(0,Slider::getValue(sKS));
			sKS+10:		setKS(1,Slider::getValue(sKS+10));
			sKS+20:		setKS(2,Slider::getValue(sKS+20));
			sKS+30:		setKS(3,Slider::getValue(sKS+30));
			sAR:		setAR(0,Slider::getValue(sAR));
			sAR+10:		setAR(1,Slider::getValue(sAR+10));
			sAR+20:		setAR(2,Slider::getValue(sAR+20));
			sAR+30:		setAR(3,Slider::getValue(sAR+30));
			sD1R:		setD1R(0,Slider::getValue(sD1R));
			sD1R+10:	setD1R(1,Slider::getValue(sD1R+10));
			sD1R+20:	setD1R(2,Slider::getValue(sD1R+20));
			sD1R+30:	setD1R(3,Slider::getValue(sD1R+30));
			sDT2:		setDT2(0,Slider::getValue(sDT2));
			sDT2+10:	setDT2(1,Slider::getValue(sDT2+10));
			sDT2+20:	setDT2(2,Slider::getValue(sDT2+20));
			sDT2+30:	setDT2(3,Slider::getValue(sDT2+30));
			sD2R:		setD2R(0,Slider::getValue(sD2R));
			sD2R+10:	setD2R(1,Slider::getValue(sD2R+10));
			sD2R+20:	setD2R(2,Slider::getValue(sD2R+20));
			sD2R+30:	setD2R(3,Slider::getValue(sD2R+30));				
			sD1L:		setD1L(0,Slider::getValue(sD1L));
			sD1L+10:	setD1L(1,Slider::getValue(sD1L+10));
			sD1L+20:	setD1L(2,Slider::getValue(sD1L+20));
			sD1L+30:	setD1L(3,Slider::getValue(sD1L+30));
			sRR:		setRR(0,Slider::getValue(sRR));
			sRR+10:		setRR(1,Slider::getValue(sRR+10));
			sRR+20:		setRR(2,Slider::getValue(sRR+20));
			sRR+30:		setRR(3,Slider::getValue(sRR+30));	
			end;

	end;

procedure handlemouse();
	begin
	X16Mouse::GetState();
	X16Mouse::CalcChPos();

//	X16Mouse::Xch:=(X16Mouse::X>>3);
//	X16Mouse::Ych:=(X16Mouse::Y>>3);
	
	SCF::DrawHexByte(75,56,X16Mouse::Buttons,1);
	SCF::DrawHexInt(70,57,X16Mouse::X,4);
	SCF::DrawHexInt(70,58,X16Mouse::Y,5);
	SCF::DrawHexByte(75,57,X16Mouse::Xch,4);
	SCF::DrawHexByte(75,58,X16Mouse::Ych,5);
	SCF::DrawHexByte(75,59, Widget::getMapValue(X16Mouse::Xch,X16Mouse::Ych),7);

	if (X16Mouse::Buttons=1) then 
		begin
		Slider::HandleClick();
		handlesliderchange();
		if X16Mouse::mouseClicked=0 then
			begin
			X16Mouse::mouseXchposAtClick:=X16Mouse::Xch;
			X16Mouse::mouseYchposAtClick:=X16Mouse::Ych;
			X16Mouse::mouseClicked:=1;
			end;
		end;
	if (X16Mouse::Buttons=0) then 
		begin
			if X16Mouse::mouseClicked=1 then
			begin
			handlebuttonclick();
			X16Mouse::mouseClicked:=0;
			Slider::clickedSlider:=$FF;
			end;
		end;
	end;

//For some reason these create stack overflow, or i dont know what, the program just exits
procedure CreateStdHorizontalSlider(slID,Xpos,Ypos,Length_,Max_,Color:byte;Caption:string);
	begin
	SCF::TextAtPos(Xpos,Ypos,Caption,Color);	
	Label::Create(slID,Xpos+4,Ypos,Color);
	Slider::Create(slID,Xpos+8,Ypos,Length_,Color,Max_,Horizontal,slID);
	end;

procedure CreateStdVerticalSlider(slID,Xpos,Ypos,Length_,Max_,Color:byte;Caption:string);
	begin
	SCF::TextAtPos(Xpos,Ypos,Caption,Color);	
	Label::Create(slID,Xpos,Ypos+Length_+4,Color);
	Slider::Create(slID,Xpos,Ypos+2,Length_,Color,Max_,Vertical,slID);
	end;

procedure createOPBlock(op,Xpos,Ypos:byte);
var opmult,color:byte;
	begin
	opmult:=op*10;	
	
	color:=1;
	SCF::TextAtPos(Xpos,Ypos,"DT1",color);	
	Label::Create(sDT1+opmult,Xpos+6,Ypos,color);
	Slider::Create(sDT1+opmult,Xpos+10,Ypos,10,color,7,Horizontal,sDT1+opmult);
	
	//CreateStdHorizontalSlider(sDT1+opmult,Xpos,Ypos,10,7,color,"DT1");
	//inc(Ypos);inc(color);
	//CreateStdHorizontalSlider(sMUL+opmult,Xpos,Ypos+1,10,15,color,"MUL");

	color:=2;
	SCF::TextAtPos(Xpos,Ypos+1,"MUL",color);
	Label::Create(sMUL+opmult,Xpos+6,Ypos+1,color);
	Slider::Create(sMUL+opmult,Xpos+10,Ypos+1,10,color,15,Horizontal,sMUL+opmult);

	color:=3;
	SCF::TextAtPos(Xpos,Ypos+2,"TL",color);		
	Label::Create(sTL+opmult,Xpos+6,Ypos+2,color);
	Slider::Create(sTL+opmult,Xpos+10,Ypos+2,32,color,127,Horizontal,sTL+opmult);

	color:=4;
	SCF::TextAtPos(Xpos,Ypos+3,"KS",color);
	Label::Create(sKS+opmult,Xpos+6,Ypos+3,color);
	Slider::Create(sKS+opmult,Xpos+10,Ypos+3,10,color,3,Horizontal,sKS+opmult);

	color:=5;
	SCF::TextAtPos(Xpos,Ypos+4,"AR",color);	
	Label::Create(sAR+opmult,Xpos+6,Ypos+4,color);
	Slider::Create(sAR+opmult,Xpos+10,Ypos+4,10,color,31,Horizontal,sAR+opmult);

	color:=6;
	SCF::TextAtPos(Xpos,Ypos+5,"D1R",color);	
	Label::Create(sD1R+opmult,Xpos+6,Ypos+5,color);
	Slider::Create(sD1R+opmult,Xpos+10,Ypos+5,10,color,31,Horizontal,sD1R+opmult);	

	color:=7;
	SCF::TextAtPos(Xpos,Ypos+6,"DT2",color);	
	Label::Create(sDT2+opmult,Xpos+6,Ypos+6,color);
	Slider::Create(sDT2+opmult,Xpos+10,Ypos+6,10,color,3,Horizontal,sDT2+opmult);	
	
	color:=8;
	SCF::TextAtPos(Xpos,Ypos+7,"D2R",color);	
	Label::Create(sD2R+opmult,Xpos+6,Ypos+7,color);
	Slider::Create(sD2R+opmult,Xpos+10,Ypos+7,10,color,31,Horizontal,sD2R+opmult);	
	
	color:=9;
	SCF::TextAtPos(Xpos,Ypos+8,"D1L",color);	
	Label::Create(sD1L+opmult,Xpos+6,Ypos+8,color);
	Slider::Create(sD1L+opmult,Xpos+10,Ypos+8,10,color,15,Horizontal,sD1L+opmult);	
	
	color:=10;
	SCF::TextAtPos(Xpos,Ypos+9,"RR",color);	
	Label::Create(sRR+opmult,Xpos+6,Ypos+9,color);
	Slider::Create(sRR+opmult,Xpos+10,Ypos+9,10,color,15,Horizontal,sRR+opmult);
	end;

procedure createUI();
	begin
	SCF::TextAtPos(0,0,"YM2151 SYNTH UI",1);

	createOPBlock(0,1,4);
	createOPBlock(1,1,18);
	createOPBlock(2,1,32);
	createOPBlock(3,1,46);	
	
	Button::Create(0,70,10,3,3,8,45);
	Button::Create(1,75,10,3,3,9,43);
	
	SCF::TextAtPos(50,3,"FB",4);
	Label::Create(sFB,50,14,4);
	Slider::Create(sFB,50,5,8,4,7,Vertical,sFB);

//	CreateStdVerticalSlider(sFB,50,3,8,7,4,"FB");

	SCF::TextAtPos(55,3,"CON",4);
	Label::Create(sCON,55,14,4);
	Slider::Create(sCON,55,5,8,4,7,Vertical,sCON);
	
	Conn::Xpos:=60;
	Conn::Ypos:=40;
	Conn::Show(7);
	end;


//MAIN START

begin
YM2151::Reset();
X16Mouse::CursorOn();

SCF::InitScreen(0);
Widget::ClearMap();
createUI();

//Widget::ShowWidgetMap();
//return();

YM2151::SetReg($20,%11000111);	//RLFFFCCC		    Right Left Feedback Connect
setFB(4);
setMUL(0,1);setMUL(1,2);setMUL(2,3);setMUL(3,0);
setTL(0,20);setTL(1,20);setTL(2,20);setTL(3,20);
setKS(0,0);setKS(1,0);setKS(2,0);setKS(3,0);
setAR(0,31);setAR(1,31);setAR(2,31);setAR(3,31);
setD1R(0,31);setD1R(1,31);setD1R(2,31);setD1R(3,31);
setDT2(0,0);setDT2(1,0);setDT2(2,0);setDT2(3,0);
setD2R(0,0);setD2R(1,0);setD2R(2,0);setD2R(3,0);
setD1L(0,0);setD1L(1,0);setD1L(2,0);setD1L(3,0);
setRR(0,5);setRR(1,5);setRR(2,5);setRR(3,5);
setCON(7);
	
Input::key:=$0;	
while (Input::key<>3) do
	begin
	Input::getin();
	if (Input::key=0 and Input::lastkey<>0) then YM2151::KeyOff(currentchanel);
	if (Input::key<>0) then 
		begin
		SCF::DrawHexByte(75, 55, Input::key, 5);
		Input::key2note();
		if(Input::note<>$FF) then
			begin
			YM2151::SetNote(0,Input::octave+transpose,Input::note); //Transpose
			YM2151::KeyOn(0,$F);
			end;
		end;
	Input::lastkey:=Input::key;

	handlemouse();

	SCF::DrawHexByte(2,59,transpose,7);
	end;

X16Mouse::CursorOff();
YM2151::Reset();
return();
end.
 