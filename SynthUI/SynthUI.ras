program Player;

var
    @define Space $A0
    hex: string = (48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 01, 02, 03, 04, 05, 06);
    Normal2YMNote: array[12] of byte = (14, 0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13);

	ymoctavenote:byte;
	YMReg : byte absolute $9FE0;
	YMData : byte absolute $9FE1;
	key : byte;
	note : byte;
	octave:byte;
	transpose:byte=3;
	mousebuttons: byte;
	mouseX: integer;
	mouseY: integer;
	
	mouseXposAtClick: byte;
	mouseYposAtClick: byte;
	mouseClicked:byte;
	
    @define ButtonCount 2
	buttonposX:array[@ButtonCount] of byte = (10,15);
	buttonposY:array[@ButtonCount] of byte = (10,10);
	buttonWidth:array[@ButtonCount] of byte = (3,3);
	buttonHeight:array[@ButtonCount] of byte = (3,3);
	buttonColor:array[@ButtonCount] of byte = (8,9);
	buttonLabel:array[@ButtonCount] of byte = (45,43);
	
	@define SliderCount 1
	sliderposX:array[@SliderCount] of byte = (10);
	sliderposY:array[@SliderCount] of byte = (20);
	sliderHeight:array[@SliderCount] of byte = (10);
	sliderColor:array[@SliderCount] of byte = (4);
	sliderValue:array[@SliderCount] of byte = (0);
	sliderMax:array[@SliderCount] of byte = (9);
	clickedSlider:byte=$FF;
	
	procedure DrawHexByte(X, Y, Number:byte, Col: byte);
	begin
		X := X * 2;
		VERA_ADDR_MID := Y;
		VERA_ADDR_LO := X;

		VERA_DATA1 := @Space;
		VERA_DATA1 := hex[Number >> 4];
		VERA_DATA1 := hex[Number & $F];
		VERA_DATA1 := @Space;

		VERA_ADDR_LO := X+1;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
   end; 

	procedure DrawHexInt(X, Y, Number:integer, Col: byte);
	begin
		X := X * 2;
		VERA_ADDR_MID := Y;
		VERA_ADDR_LO := X;

		VERA_DATA1 := hex[Number >> 12];
		VERA_DATA1 := hex[(Number >> 8)&$F];
		VERA_DATA1 := hex[(Number >> 4)&$F];
		VERA_DATA1 := hex[Number & $F];

		VERA_ADDR_LO := X+1;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
		VERA_DATA1 := Col;
   end; 

procedure ResetYM(); 
	var 
		i : byte;
	begin

    fori i := 0 to $5F do
    	begin
	    YMReg:=i;
	    YMData:=0;
	    end;

    fori i := $60 to $7F do
	    begin
	    YMReg:=i;
	    YMData:=127;
	    end;

    for i := $80 to $FF do
	    begin
	    YMReg:=i;
	    YMData:=0;
	    end;
    YMReg:=i;
    YMData:=0;

	end;

procedure mouse_on();
	begin
	asm("
		LDA #1
		jsr $FF68
	");
	end;

procedure mouse_off();
	begin
	asm("
		LDA #0
		jsr $FF68
	");
	end;
	
procedure mouse_get();
	begin
	asm("
		jsr $FF6B
		sta mousebuttons
		LDA $00,X
		STA mouseX
		LDA $01,X
		STA mouseX+1;
		LDA $02,X
		sta mouseY
		LDA $03,X
		sta mouseY+1;
	");
	end;


procedure getin();
	begin
	asm("
		jsr $FFE4
		sta key
	");
	end;

procedure key2note();
begin
	note:=$FF;
    case key of
	    $5A: begin octave:=0;note:=0; end;
	    $53: begin octave:=0;note:=1; end;
	    $58: begin octave:=0;note:=2; end;
	    $44: begin octave:=0;note:=3; end; 
	    $43: begin octave:=0;note:=4; end;
	    $56: begin octave:=0;note:=5; end;
	    $47: begin octave:=0;note:=6; end;
	    $42: begin octave:=0;note:=7; end;
		$48: begin octave:=0;note:=8; end;
		$4E: begin octave:=0;note:=9; end;
		$4A: begin octave:=0;note:=10; end;
		$4D: begin octave:=0;note:=11; end;
		$2C: begin octave:=1;note:=0; end;
		$4C: begin octave:=1;note:=1; end;
		$2E: begin octave:=1;note:=2; end;
		$3B: begin octave:=1;note:=3; end;
		$2F: begin octave:=1;note:=4; end;
		$51: begin octave:=1;note:=0; end;
		$32: begin octave:=1;note:=1; end;
		$57: begin octave:=1;note:=2; end;
		$33: begin octave:=1;note:=3; end;
		$45: begin octave:=1;note:=4; end;
		$52: begin octave:=1;note:=5; end;
		$35: begin octave:=1;note:=6; end;
		$54: begin octave:=1;note:=7; end;
		$36: begin octave:=1;note:=8; end;
		$59: begin octave:=1;note:=9; end;
		$37: begin octave:=1;note:=10; end;
		$55: begin octave:=1;note:=11; end;
		$49: begin octave:=2;note:=0; end;
		$39: begin octave:=2;note:=1; end;
		$4F: begin octave:=2;note:=2; end;
		$30: begin octave:=2;note:=3; end;
		$50: begin octave:=2;note:=4; end;
		$5B: begin octave:=2;note:=5; end;
		$3D: begin octave:=2;note:=6; end;
		$5D: begin octave:=2;note:=7; end;
    end;
end;

procedure toYMoctavenote();

begin
octave:=octave+transpose;  //Transpose
if (note=0 and octave>0) then dec(octave);  //YMidiotizm
ymoctavenote:=(Normal2YMNote[note]&$F)|(octave<<4);
end;

procedure handlebuttonclick();
var i,mx2,my2,clickedButton:byte;
begin

i:=0;
clickedButton:=$FF;
while (i<@ButtonCount and clickedButton=$FF) do
	begin;
	mx2:=buttonposX[i]+buttonWidth[i];
	my2:=buttonposY[i]+buttonHeight[i];
	if (mouseXposAtClick>=buttonposX[i] and mouseXposAtClick<=mx2) then  //Ouch... Only 2 parametern in and in if??? 
		if (mouseYposAtClick>=buttonposY[i] and mouseYposAtClick<=my2) then clickedButton:=i;
	inc(i);
	end;

case clickedButton of
	0: dec(transpose);
	1: inc(transpose);
	end;

end;

procedure drawChar(X,Y,char,color:byte);
begin
		X := X * 2;
		VERA_ADDR_MID := Y;
		VERA_ADDR_LO := X;
		VERA_DATA1 := char;
		VERA_ADDR_LO := X+1;
		VERA_DATA1 := color;
end;

procedure drawSlider(slid:byte);
var i:byte;
begin
for i:=sliderposY[slid] to sliderposY[slid]+sliderHeight[slid] do
	drawChar(sliderposX[slid],i,$5D,sliderColor[slid]);
drawChar(sliderposX[slid],sliderposY[slid]+sliderValue[slid],$5B,sliderColor[slid]);
end;

procedure handlesliderclick();
var i,mx,my,my2:byte;
begin

if (mouseClicked=1 and clickedSlider<>$FF) then
	begin
	my2:=sliderposY[clickedSlider]+sliderHeight[clickedSlider];
	my:=mouseY;
	if (my>=sliderposY[clickedSlider] and my<=my2) then 
		begin
		sliderValue[clickedSlider]:=my-sliderposY[clickedSlider];
		drawSlider(clickedSlider);
		end;
	end
else
	begin
	i:=0;
	clickedSlider:=$FF;

	while (i<@SliderCount and clickedSlider=$FF) do
		begin;
		my2:=sliderposY[i]+sliderHeight[i];
		mx:=mouseX;
		my:=mouseY;
		if (mx=sliderposX[i]) then
			begin
			if (my>=sliderposY[i] and my<=my2) then 
				begin
				clickedSlider:=i;
				sliderValue[i]:=my-sliderposY[i];
				drawSlider(i);
				end;
			end;
		inc(i);
		end;
	end;

case clickedSlider of
	0: DrawHexByte(40,30,sliderValue[0],1);
	end;
end;



procedure handlemouse();
begin
	mouse_get();	
	
	DrawHexByte(75,56,mousebuttons,1);
	DrawHexInt(70,57,mouseX,4);
	DrawHexInt(70,58,mouseY,5);
	mouseX:=mouseX>>3;
	mouseY:=mouseY>>3;
	DrawHexByte(75,57,mouseX,4);
	DrawHexByte(75,58,mouseY,5);
	

if (mousebuttons=1) then 
	begin
	handlesliderclick();
	if mouseClicked=0 then
		begin
		mouseXposAtClick:=mouseX;
		mouseYposAtClick:=mouseY;
		mouseClicked:=1;
		end;
	end;
if (mousebuttons=0) then 
	begin
		if mouseClicked=1 then
		begin
		handlebuttonclick();
		mouseClicked:=0;
		end;
	end;
end;



procedure drawLabel(X,Y:byte; caption:pointer; color:byte);
var i,c:byte;
begin
i:=0;
c:=caption[i];
while (c<>0) do
	begin
	drawChar(X+i,Y,c-$40,color);
	inc(i);
	c:=caption[i];
	end;
end;

procedure drawBox(posX,posY,Width,Height,color:byte);
var x,y:byte;
begin
for x:=posX to posX+Width do
	for y:=posY to posY+Height do
		drawChar(x,y,@Space,color);
end;

procedure drawButton(butt:byte);
var labelx,labely:byte;
begin
drawBox(buttonposX[butt],buttonposY[butt],buttonWidth[butt],buttonHeight[butt],buttonColor[butt]);
labelx:=buttonposX[butt]+buttonWidth[butt]>>1;
labely:=buttonposY[butt]+buttonHeight[butt]>>1;
drawChar(labelx,labely,buttonLabel[butt],buttonColor[butt]);
//for x:=buttonposX[butt] to buttonposX[butt]+buttonWidth[butt] do
//	for y:=buttonposY[butt] to buttonposY[butt]+buttonHeight[butt] do
//		drawChar(x,y,@Space,buttonColor[butt]);
end;

procedure drawButtons();
var i:byte;
begin
for i:=0 to @ButtonCount do drawButton(i);
end;

procedure drawSliders();
var i:byte;
begin
for i:=0 to @SliderCount do drawSlider(i);
end;


//MAIN START

begin
ResetYM();
mouse_on();

	VERA_CTRL := 0;
	VERA_ADDR_HI := $20;

drawBox(0,0,80,60,0);
drawButtons();
drawSliders();
drawLabel(5,5,"+",4);


YMReg:=$20;
YMData:=%11000111;
YMReg:=$60;//TL
YMData:=21;
YMReg:=$80;//AR
YMData:=31;
YMReg:=$80;//AR
YMData:=31;
YMReg:=$A0;//D1
YMData:=0;
YMReg:=$C0;//D2
YMData:=0;
YMReg:=$E0;//RR
YMData:=5;

	
key:=$0;	
while (key<>3) do
	begin
	getin();
	if (key<>0) then 
		begin	
		if (key=$20) then
			begin
		    YMReg:=$08;
			YMData:=%00000000;		
			end
		else
			begin
			DrawHexByte(75, 55,  key, 5);
			key2note();
			if(note<>$FF) then
				begin
				toYMoctavenote();
				YMReg:=$28;
				YMData:=ymoctavenote;
				YMReg:=$08;
				YMData:=%01111000;
				end;
			end;
		end;

	handlemouse();

	DrawHexByte(2,59,transpose,7);
	end;

mouse_off();
ResetYM();
return();
end.
 