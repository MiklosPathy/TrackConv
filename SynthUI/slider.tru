Unit Slider;

@use "SCF"
@use "Widget"
@use "X16Mouse"
@use "Label"

@define SliderMaxCount 64

var

	const Vertical : byte = 0;
	const Horizontal : byte = 1;

	tSlider = record
		posX, posY, Length_, Color, Value, Max_, Mode, AttachedLabel, PrevValue, PrevSlideCharPos, NeedToSetValueLater, SetValueLater : byte;	
	end;

	sliders:array[@SliderMaxCount] of Slider::tSlider;

	clickedSlider:byte=$FF;

procedure getSlidePositionFine(sllen,slval,slmax:byte);
	var temp:integer;
		slres:byte;
	begin
	if (sllen-1=slmax) then	slres:=slval
	else
		begin
		temp:=sllen*slval/slmax;
		slres:=temp;
		if slres>sllen-1 then slres:=sllen-1;
		end;
	returnvalue(slres);
	end;

procedure getSliderValueFine(mousepos:integer;mousechpos,slpos,sllen,slmax:byte);
var mousecorrected,sliderposcorrected,temp:integer;
	endcharpos,slres:byte;
	begin
	if (mousechpos<slpos) then ReturnValue(0);
	endcharpos:=slpos+sllen-1;
	if (endcharpos<mousechpos) then ReturnValue(slmax);
	sliderposcorrected:=slpos;
	sliderposcorrected:=sliderposcorrected<<2;
	mousecorrected:=(mousepos>>1)-sliderposcorrected;
	temp:=slmax*mousecorrected/(sllen<<2);
	slres:=temp;	
	returnvalue(slres);
	end;

procedure DrawSlide(slID:byte);
var slres,posx,posy,chartype,char:byte;
	begin
	if sliders[slID].Mode=Horizontal then
		begin
		slres:=getSlidePositionFine(sliders[slID].Length_<<2,sliders[slID].Value,sliders[slID].Max_);
		posx:=(slres>>2)+sliders[slID].posX;
		if posx<>sliders[slID].PrevSlideCharPos then 
			begin
			SCF::DrawChar(sliders[slID].PrevSlideCharPos,sliders[slID].posY,$43,sliders[slID].Color);
			sliders[slID].PrevSlideCharPos:=posx;
			end;	
		chartype:=slres&%00000011;
		case chartype of
			0: char:=$74;
			1: char:=$47;
			2: char:=$48;
			3: char:=$6A;
			end;
		SCF::DrawChar(posx,sliders[slID].posY,char,sliders[slID].Color);		
		end
	else
		begin
		slres:=getSlidePositionFine(sliders[slID].Length_<<2,sliders[slID].Value,sliders[slID].Max_);
		posy:=(slres>>2)+sliders[slID].posY;
		if posy<>sliders[slID].PrevSlideCharPos then 
			begin
			SCF::DrawChar(sliders[slID].posX,sliders[slID].PrevSlideCharPos,$5D,sliders[slID].Color);
			sliders[slID].PrevSlideCharPos:=posy;
			end;
		chartype:=slres&%00000011;
		case chartype of
			0: char:=$77;
			1: char:=$44;
			2: char:=$46;
			3: char:=$6F;
			end;
		SCF::DrawChar(sliders[slID].posX,posy,char,sliders[slID].Color);
		end;

	if (sliders[slID].AttachedLabel<>$FF) then Label::setValue(sliders[slID].AttachedLabel,sliders[slID].Value);
	end;

procedure getValue(slID:byte);
	begin
	ReturnValue(sliders[slID].Value);
	end;
	
procedure setValue(slID,value:byte);
	begin
	if (value>sliders[slID].Max_) then value:=sliders[slID].Max_;
	if (value<>sliders[slID].PrevValue) then
		begin
		sliders[slID].PrevValue:=sliders[slID].Value;
		sliders[slID].Value:=value;
		DrawSlide(slID);
		end;
	end;

procedure setValueLater(slID,value:byte);
	begin
	sliders[slID].NeedToSetValueLater:=1;
	sliders[slID].SetValueLater:=value;
	end;
	
procedure processSetLaterValues();
var slID:byte;
	begin
	for slID:=0 to @SliderMaxCount do 
		if sliders[slID].NeedToSetValueLater=1 then
		begin
		sliders[slID].NeedToSetValueLater:=0;
		setValue(slID,sliders[slID].SetValueLater)
		end;

	end;

procedure resetAllSetLaterValues();
var slID:byte;
	begin
	for slID:=0 to @SliderMaxCount do sliders[slID].NeedToSetValueLater:=0;
	end;

procedure calcSliderValue(slID:byte);
var temp:byte;
	begin
	case sliders[slID].Mode of
		Vertical:
			begin
			temp:=getSliderValueFine(X16Mouse::Y,X16Mouse::Ych,sliders[slID].posY,sliders[slID].Length_,sliders[slID].Max_);
			setValue(slID,temp);
			//sliders[slID].Value:=getSliderValueFine(X16Mouse::Y,X16Mouse::Ych,sliders[slID].posY,sliders[slID].Length_,sliders[slID].Max_);
			end;
		Horizontal:
			begin	
			temp:=getSliderValueFine(X16Mouse::X,X16Mouse::Xch,sliders[slID].posX,sliders[slID].Length_,sliders[slID].Max_);
			setValue(slID,temp);
			//sliders[slID].Value:=getSliderValueFine(X16Mouse::X,X16Mouse::Xch,sliders[slID].posX,sliders[slID].Length_,sliders[slID].Max_);
			end;
		end;						
	end;

procedure HandleClick();
	var slID,WID,WT:byte;
	begin
	if (X16Mouse::mouseClicked=1 and clickedSlider<>$FF) then //Slider dragging.
		begin
		calcSliderValue(clickedSlider);
		end
	else	
		begin
		clickedSlider:=$FF;
		WID:=Widget::getMapValue(X16Mouse::Xch,X16Mouse::Ych);
		WT:=WID&%11000000;
		if WT=%01000000 then //Slider
			begin
			slID:=WID&%00111111;
			clickedSlider:=slID;
			calcSliderValue(clickedSlider);
			end;
		end;
	end;



procedure Create(slID,posX,posY,Length_,Color,Max_,Mode,AttachedLabelID:byte);
var WID,i:byte;
	begin
	sliders[slID].posX:=posX;
	sliders[slID].posY:=posY;
	sliders[slID].Length_:=Length_;
	sliders[slID].Color:=Color;
	sliders[slID].Value:=0;
	sliders[slID].Max_:=Max_;
	sliders[slID].Mode:=Mode;	
	sliders[slID].AttachedLabel:=AttachedLabelID;
	sliders[slID].NeedToSetValueLater:=0;

	WID:=slID|%01000000;
	case Mode of
		Horizontal:
			begin
			Widget::PlaceOnMap(posX,posY,Length_,1,WID);
			sliders[slID].PrevSlideCharPos:=posX;
			for i:=posX to posX+Length_ do SCF::DrawChar(i,posY,$43,Color);
			end;
		Vertical:
			begin
			Widget::PlaceOnMap(posX,posY,1,Length_,WID);
			sliders[slID].PrevSlideCharPos:=posY;
			for i:=posY to posY+Length_ do SCF::DrawChar(posX,i,$5D,Color);
			end;
		end;

	Slider::DrawSlide(slID);
	end;
end.
