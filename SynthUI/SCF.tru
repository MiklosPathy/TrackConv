unit SCF;   //Simple Char Functions

var
	@define Space $A0
    hex: string = (48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 01, 02, 03, 04, 05, 06);

procedure DrawBinByte(X, Y, Number:byte, Col: byte);
	begin
	X := X * 2;
	VERA_ADDR_HI := $20;
	VERA_ADDR_MID := Y;
	VERA_ADDR_LO := X;

	VERA_DATA1 := hex[(Number >> 7)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 6)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;
	VERA_DATA1 := hex[(Number >> 5)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 4)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);	
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 3)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);	
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 2)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);	
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 1)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);	
	VERA_ADDR_LO := X;		
	VERA_DATA1 := hex[(Number >> 0)&$01];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;	
    end; 
	
procedure DrawHexByte(X, Y, Number:byte, Col: byte);
	begin
	X := X * 2;
	VERA_ADDR_HI := $20;
	VERA_ADDR_MID := Y;
	VERA_ADDR_LO := X;
	VERA_DATA1 := hex[Number >> 4];
	inc(X);
	VERA_ADDR_LO := X;
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;
	VERA_DATA1 := hex[Number & $F];
	inc(X);
	VERA_ADDR_LO := X;
	VERA_DATA1 := Col;
    end; 

procedure DrawHexInt(X, Y:byte, Number:integer, Col: byte);
	begin
	X := X * 2;
	VERA_ADDR_HI := $20;
	VERA_ADDR_MID := Y;
	VERA_ADDR_LO := X;

	VERA_DATA1 := hex[Number >> 12];
	inc(X);
	VERA_ADDR_LO := X;
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 8)&$F];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[(Number >> 4)&$F];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := hex[Number & $F];
	inc(X);
	VERA_ADDR_LO := X;	
	VERA_DATA1 := Col;
    end; 

procedure DrawChar(X,Y,char,color:byte);
	begin
	X := X * 2;
	VERA_ADDR_HI := $20;
	VERA_ADDR_MID := Y;
	VERA_ADDR_LO := X;
	VERA_DATA1 := char;
	VERA_ADDR_LO := X+1;
	VERA_DATA1 := color;
	end;

//Only for uppercase alphabetical and numerical chars (compiler does not convert strings to PETSCII, so this one do something
procedure TextAtPos(X,Y:byte; caption:pointer; color:byte);
	var i,c,c2:byte;
	begin
	i:=0;
	c:=caption[i];
	while (c<>0) do
		begin
		c2:=$20;
		if (c>=$41 and c<=$5A) then c2:=c-$40;
		if (c>=$20 and c<=$40) then c2:=c;
		DrawChar(X+i,Y,c2,color);
		inc(i);
		c:=caption[i];
		end;
	end;

procedure DrawBox(posX,posY,Width,Height,color:byte);
	var x,y:byte;
	begin
	for x:=posX to posX+Width do
		for y:=posY to posY+Height do
			DrawChar(x,y,@Space,color);
	end;

procedure InitScreen(color:byte);
	begin
	VERA_CTRL := 0;
	DrawBox(0,0,80,60,color);
	end;

end.