program PSGSynthUI;

@use "PSG"
@use "SCF"
@use "X16Mouse"
@use "Input"
@use "Widget"
@use "Label"
@use "Slider"
@use "Button"
@use "CheckBox"
@use "Ticks"
@use "CommonUI"
@use "ELFO"



var 
	const CS	:byte = 10;
	const CS2	:byte = CS*2;
	const CS3	:byte = CS*3;
		
   	Default_irq_handler:pointer;

	const sDT	:byte = 0;
	const sVOL	:byte = 1;
	const sWF	:byte = 2;
	const sPW	:byte = 3;

	const sUPDURATION	:byte = 4;
	const sMAXLEVEL		:byte = 5;
	const sMAXDURATION	:byte = 6;
	const sDOWNDURATION	:byte = 7;
	const sMINLEVEL		:byte = 8;
	const sMINDURATION	:byte = 9;


	const cR    :byte = 0;
	const cL    :byte = 1;

	const cREPEATE		:byte = 3;
	const cKEYSYNC		:byte = 4;


	const sTRANSPOSE : byte = 50;
	const cHOLDKEY :byte = 50;

	const Vertical : byte = 0;
	const Horizontal : byte = 1;

	transpose:byte=3;
	holdkey:byte=0;
	currentchanel:byte=0;
	
	tPSGChnStat = record
		DT,VOL,WF,PW,R,L:byte;
	end;
	PSGChns:array[16] of tPSGChnStat;
	
	sliderupdatecount:byte=0;


procedure setDT(chn,value:byte);
	begin
	PSGChns[chn].DT:=value;
	Slider::setValueLater(sDT+(chn*CS),value);
	PSG::SetNote(chn,Input::octave+transpose,Input::note+PSGChns[chn].DT);
	end;
	
procedure setVOL(chn,value:byte);
	begin
	PSGChns[chn].VOL:=value;
	Slider::setValueLater(sVOL+(chn*CS),value);
	PSG::SetVol(chn,value);
	end;

procedure setWF(chn,value:byte);
	begin
	PSGChns[chn].WF:=value;
	Slider::setValueLater(sWF+(chn*CS),value);
	PSG::SetWF(chn,value);
	end;
	
procedure setPW(chn,value:byte);
	begin
	PSGChns[chn].PW:=value;
	Slider::setValueLater(sPW+(chn*CS),value);
	PSG::SetPW(chn,value);
	end;

procedure setR(chn,value:byte);
	begin
	PSGChns[chn].R:=value;
	CheckBox::setValue(cR+(chn*CS),value);
	PSG::SetR(chn,value);
	end;

procedure setL(chn,value:byte);
	begin
	PSGChns[chn].L:=value;
	CheckBox::setValue(cL+(chn*CS),value);
	PSG::SetL(chn,value);
	end;





procedure setHOLDKEY(value:byte);
	begin
	CheckBox::setValue(cHOLDKEY,value);
	holdkey:=value;
	end;

procedure setTRANSPOSE(value:byte);
	begin
	Slider::setValue(sTRANSPOSE,value);
	transpose:=value;
	end;




procedure setUPDURATION(elfo,value:byte);
	begin
	ELFO::setUPDURATION(elfo,value);
	Slider::setValue(sUPDURATION+(elfo*CS),value);
	end;

procedure setMAXLEVEL(elfo,value:byte);
	begin
	ELFO::setMAXLEVEL(elfo,value);
	Slider::setValue(sMAXLEVEL+(elfo*CS),value);
	end;

procedure setMAXDURATION(elfo,value:byte);
	begin
	ELFO::setMAXDURATION(elfo,value);
	Slider::setValue(sMAXDURATION+(elfo*CS),value);
	end;

procedure setDOWNDURATION(elfo,value:byte);
	begin
	ELFO::setDOWNDURATION(elfo,value);
	Slider::setValue(sDOWNDURATION+(elfo*CS),value);
	end;

procedure setMINLEVEL(elfo,value:byte);
	begin
	ELFO::setMINLEVEL(elfo,value);
	Slider::setValue(sMINLEVEL+(elfo*CS),value);
	end;

procedure setMINDURATION(elfo,value:byte);
	begin
	ELFO::setMINDURATION(elfo,value);
	Slider::setValue(sMINDURATION+(elfo*CS),value);
	end;

procedure setREPEATE(elfo,value:byte);
	begin
	ELFO::setREPEATE(elfo,value);
	CheckBox::setValue(cREPEATE,value);
	end;

procedure setKEYSYNC(elfo,value:byte);
	begin
	ELFO::setKEYSYNC(elfo,value);	
	CheckBox::setValue(cKEYSYNC,value);
	end;


procedure handlesliderchange();
	begin
	//SCF::DrawBinByte(40,6,clickedSlider,5);
	
		case Slider::clickedSlider of
			sDT:		setDT(0,Slider::getValue(sDT));
			sDT+CS:		setDT(1,Slider::getValue(sDT+CS));
			sDT+CS2:	setDT(2,Slider::getValue(sDT+CS2));
			sDT+CS3:	setDT(3,Slider::getValue(sDT+CS3));						
			sVOL:		setVOL(0,Slider::getValue(sVOL));
			sVOL+CS:	setVOL(1,Slider::getValue(sVOL+CS));
			sVOL+CS2:	setVOL(2,Slider::getValue(sVOL+CS2));
			sVOL+CS3:	setVOL(3,Slider::getValue(sVOL+CS3));									
			sWF:		setWF(0,Slider::getValue(sWF));
			sWF+CS:		setWF(1,Slider::getValue(sWF+CS));
			sWF+CS2:	setWF(2,Slider::getValue(sWF+CS2));
			sWF+CS3:	setWF(3,Slider::getValue(sWF+CS3));
			sPW:		setPW(0,Slider::getValue(sPW));
			sPW+CS:		setPW(1,Slider::getValue(sPW+CS));
			sPW+CS2:	setPW(2,Slider::getValue(sPW+CS2));
			sPW+CS3:	setPW(3,Slider::getValue(sPW+CS3));
			
			sUPDURATION:	setUPDURATION(0,Slider::getValue(sUPDURATION));
			sMAXLEVEL:		setMAXLEVEL(0,Slider::getValue(sMAXLEVEL));
			sMAXDURATION:	setMAXDURATION(0,Slider::getValue(sMAXDURATION));
			sDOWNDURATION:	setDOWNDURATION(0,Slider::getValue(sDOWNDURATION));
			sMINLEVEL:		setMINLEVEL(0,Slider::getValue(sMINLEVEL));
			sMINDURATION:	setMINDURATION(0,Slider::getValue(sMINDURATION));															

			sTRANSPOSE:	setTRANSPOSE(Slider::getValue(sTRANSPOSE));
			end;

	end;

procedure handlecheckboxchange();
	begin
	case CheckBox::clickedcheckbox of
		cL:		 	setL(0,CheckBox::getValue(cL));
		cL+CS:	 	setL(1,CheckBox::getValue(cL+CS));
		cL+CS2:	 	setL(2,CheckBox::getValue(cL+CS2));
		cL+CS3:	 	setL(3,CheckBox::getValue(cL+CS3));
		cR:		 	setR(0,CheckBox::getValue(cR));
		cR+CS:	 	setR(1,CheckBox::getValue(cR+CS));
		cR+CS2:	 	setR(2,CheckBox::getValue(cR+CS2));
		cR+CS3:	 	setR(3,CheckBox::getValue(cR+CS3));
		
		cREPEATE:	setREPEATE(0,CheckBox::getValue(cREPEATE));
		cKEYSYNC:	setKEYSYNC(0,CheckBox::getValue(cKEYSYNC));		

		cHOLDKEY:	setHOLDKEY(CheckBox::getValue(cHOLDKEY));
	end;
	CheckBox::clickedcheckbox:=$FF;
	end;


procedure handlemouse();
	begin
	X16Mouse::GetState();
	X16Mouse::CalcChPos();

//	X16Mouse::Xch:=(X16Mouse::X>>3);
//	X16Mouse::Ych:=(X16Mouse::Y>>3);
	
	SCF::DrawHexByte(75,56,X16Mouse::Buttons,1);
	SCF::DrawHexInt(70,57,X16Mouse::X,4);
	SCF::DrawHexInt(70,58,X16Mouse::Y,5);
	SCF::DrawHexByte(75,57,X16Mouse::Xch,4);
	SCF::DrawHexByte(75,58,X16Mouse::Ych,5);
	SCF::DrawHexByte(75,59, Widget::getMapValue(X16Mouse::Xch,X16Mouse::Ych),7);

	if (X16Mouse::Buttons=1) then 
		begin
		Slider::HandleClick();
		handlesliderchange();
		if X16Mouse::mouseClicked=0 then
			begin
			X16Mouse::mouseXchposAtClick:=X16Mouse::Xch;
			X16Mouse::mouseYchposAtClick:=X16Mouse::Ych;
			X16Mouse::mouseClicked:=1;
			end;
		end;
	if (X16Mouse::Buttons=0) then 
		begin
			if X16Mouse::mouseClicked=1 then
			begin
			//handlebuttonclick();
			CheckBox::HandleClick();
			handlecheckboxchange();
			X16Mouse::mouseClicked:=0;
			Slider::clickedSlider:=$FF;
			end;
		end;
	end;

procedure createPSGChnBlock(chn,Xpos,Ypos:byte);
var chnmult,color:byte;
	begin
	chnmult:=chn*CS;	
	color:=1;
	
	SCF::DrawHexByte(Xpos,Ypos,chn,color);
	Xpos:=Xpos+3;

	color:=7;	
	CommonUI::CreateStdHorizontalSlider(sDT+chnmult,Xpos,Ypos,16,63,color,"DT");

	color:=1;
	inc(Ypos);
	CommonUI::CreateStdHorizontalSlider(sVOL+chnmult,Xpos,Ypos,16,63,color,"VOL");
	inc(Ypos);
	CommonUI::CreateStdHorizontalSlider(sPW+chnmult,Xpos,Ypos,16,63,color,"PW");
	inc(Ypos);	
	CommonUI::CreateStdHorizontalSlider(sWF+chnmult,Xpos,Ypos,3,3,color,"WF");

	SCF::TextAtPos(Xpos+11,Ypos,"L",color);
	CheckBox::Create(cL+chnmult,Xpos+13,Ypos,3,1,5,2);

	SCF::TextAtPos(Xpos+18,Ypos,"R",color);
	CheckBox::Create(cR+chnmult,Xpos+20,Ypos,3,1,5,2);	

	

	end;
	
procedure createELFOBlock(chn,Xpos,Ypos:byte);
var chnmult,color:byte;
	begin
	chnmult:=chn*CS;
	color:=7;
	
	SCF::DrawHexByte(Xpos,Ypos,chn,color);


	CommonUI::CreateStdHorizontalSlider(sMAXLEVEL+chnmult,Xpos,Ypos+3,16,63,color,"MXL");
	CommonUI::CreateStdHorizontalSlider(sMINLEVEL+chnmult,Xpos,Ypos+4,16,63,color,"MNL");

	CommonUI::CreateStdHorizontalSlider(sUPDURATION+chnmult,Xpos,Ypos+5,16,63,color,"UD");
	CommonUI::CreateStdHorizontalSlider(sMAXDURATION+chnmult,Xpos,Ypos+6,16,63,color,"MXD");
	CommonUI::CreateStdHorizontalSlider(sDOWNDURATION+chnmult,Xpos,Ypos+7,16,63,color,"DD");
	CommonUI::CreateStdHorizontalSlider(sMINDURATION+chnmult,Xpos,Ypos+8,16,63,color,"MND");

	SCF::TextAtPos(Xpos,Ypos+9,"REP",color);
	CheckBox::Create(cREPEATE+chnmult,Xpos+4,Ypos+9,3,1,5,2);

	SCF::TextAtPos(Xpos,Ypos+10,"KS",color);
	CheckBox::Create(cKEYSYNC+chnmult,Xpos+4,Ypos+10,3,1,5,2);	
	end;

procedure createUI();
var Ypos,color:byte;
	begin
	SCF::TextAtPos(0,0,"PSG SYNTH UI    V0.1",1);
	
	color:=1;

	Ypos:=59;
	color:=7;
	SCF::TextAtPos(22,Ypos,"HOLDKEY",color);
	CheckBox::Create(cHOLDKEY,30,Ypos,3,1,5,2);
	
	SCF::TextAtPos(0,59,"TRANSPOSE",color);
	Label::Create(sTRANSPOSE,10,59,color);
	Slider::Create(sTRANSPOSE,13,59,6,color,7,Horizontal,sTRANSPOSE);	
	
	Ypos:=5;
	createPSGChnBlock(0,1,Ypos);
	Ypos:=Ypos+5;
	createPSGChnBlock(1,1,Ypos);
	Ypos:=Ypos+5;
	createPSGChnBlock(2,1,Ypos);
	Ypos:=Ypos+5;
	createPSGChnBlock(3,1,Ypos);		

	Ypos:=5;
	createELFOBlock(0,40,Ypos);
	end;

procedure dumpRegs();
	begin
	end;




procedure DoThisInIRQ();
	begin
	ELFO::CalcNextValue(0);
	setVOL(currentchanel,ELFO::getCurrentValue(0));
	
//	if PSGChns[currentchanel].VOL<>0 then 
//		begin
//		setVOL(currentchanel,PSGChns[currentchanel].VOL-1);
//		setVOL(currentchanel+1,PSGChns[currentchanel].VOL);
//		setVOL(currentchanel+2,PSGChns[currentchanel].VOL);
//		setVOL(currentchanel+3,PSGChns[currentchanel].VOL);
//		end;
	end;

procedure SetIRQToMyHandler();
	begin
	asm("
    lda $0314
    sta Default_irq_handler
    lda $0315
    sta Default_irq_handler+1
	sei
	lda #<custom_irq_handler
	sta $0314
	lda #>custom_irq_handler
	sta $0315
	cli
	rts

//Turbo Rascal compiler trick: i want my custom handler compiled, so it is in this block, and then call out to a pascal procedure.
custom_irq_handler:
//Handle only VSYNC interrupt, so we run only 60 times per second
    lda $9F27	
    and #$01
    beq irq_done
    ; Whatever code your program
    ; wanted to execute...
	");

	DoThisInIRQ();
	
	asm("
//This is recommended to only have VSYNC interrupt. Or what and how.	
    lda #$01
    sta $9F27
irq_done:
    ; Return to Kernal handling:
    jmp (Default_irq_handler)

	");
	end;



procedure DoThisOnKeyDown();
	begin
	PSG::SetNote(currentchanel,Input::octave+transpose,Input::note+PSGChns[currentchanel].DT); //Transpose	
	ELFO::KeyDown(0);
/*
	PSG::SetNote(currentchanel,Input::octave+transpose,Input::note+PSGChns[currentchanel].DT); //Transpose
	setVOL(currentchanel,63);
	inc(currentchanel);
	PSG::SetNote(currentchanel,Input::octave+transpose,Input::note+PSGChns[currentchanel].DT); //Transpose
	setVOL(currentchanel,63);
	inc(currentchanel);	
	PSG::SetNote(currentchanel,Input::octave+transpose,Input::note+PSGChns[currentchanel].DT); //Transpose
	setVOL(currentchanel,63);
	inc(currentchanel);
	PSG::SetNote(currentchanel,Input::octave+transpose,Input::note+PSGChns[currentchanel].DT); //Transpose
	setVOL(currentchanel,63);
	currentchanel:=0;
*/
	end;

procedure DoThisOnKeyUp();
	begin
	ELFO::KeyUp(0);
/*
	setVOL(currentchanel,0);
	inc(currentchanel);
	setVOL(currentchanel,0);
	inc(currentchanel);	
	setVOL(currentchanel,0);
	inc(currentchanel);
	setVOL(currentchanel,0);
	currentchanel:=0;
*/	
	end;

begin
PSG::Reset();
X16Mouse::CursorOn();

SCF::InitScreen(0);
Widget::ClearMap();
Slider::resetAllSetLaterValues();
createUI();

setDT(0,0);
setVOL(0,63);
setWF(0,0);
setPW(0,31);
setL(0,1);
setR(0,1);

setUPDURATION(0,0);
setMAXLEVEL(0,63);
setMAXDURATION(0,0);
setDOWNDURATION(0,63);
setMINLEVEL(0,0);
setMINDURATION(0,0);
setREPEATE(0,0);
setKEYSYNC(0,1);	

setHOLDKEY(0);
setTRANSPOSE(3);

//SetIRQToMyHandler();


Input::key:=$0;	
while (Input::key<>3) do
	begin
	if (sliderupdatecount>=3) then
		begin
		Slider::processSetLaterValues();
		sliderupdatecount:=0;
		end;
	Input::getin();
	if (holdkey=0) then
		if (Input::key=0 and Input::lastkey<>0) then DoThisOnKeyUp();

	if (Input::key<>0) then 
		begin
		if (Input::key=$0D) then dumpRegs();
		if (holdkey=1 and Input::key=$20) then DoThisOnKeyUp();
		
		SCF::DrawHexByte(75, 55, Input::key, 5);
		Input::key2note();
		if(Input::note<>$FF) then
			begin
			DoThisOnKeyDown();
			end;
		end;
	Input::lastkey:=Input::key;
	handlemouse();
	if Ticks::TickedByte()<>0 then 
		begin
		DoThisInIRQ();
		inc(sliderupdatecount);
		end;
	end;

X16Mouse::CursorOff();
PSG::Reset();
return();
end.
